{
    "metadata": {
      "version": "1.0",
      "language": "typescript",
      "description": "Observability contract definitions. Define critical paths and required observability signals for your API endpoints.",
      "supported_languages": ["typescript", "javascript", "python", "java", "go", "rust", "csharp"],
      "instructions": "Edit this file to define your observability contracts. For each contract, specify which endpoints to monitor and what observability signals must be present at each step of the critical path."
    },
    "observability_signals": {
      "logging": {
        "description": "Required logging at this step",
        "language_specific": {
          "typescript": {
            "patterns": [
              "logger\\.\\w+\\(",
              "log\\.\\w+\\(",
              "@Logger()",
              "console\\.log\\("
            ],
            "libraries": ["winston", "pino", "bunyan", "npmlog"],
            "minimum_levels": ["error", "warn"]
          },
          "javascript": {
            "patterns": [
              "logger\\.\\w+\\(",
              "log\\.\\w+\\(",
              "console\\.log\\("
            ],
            "libraries": ["winston", "pino", "bunyan"],
            "minimum_levels": ["error", "warn"]
          },
          "python": {
            "patterns": [
              "logging\\.\\w+\\(",
              "logger\\.\\w+\\(",
              "@log\\(",
              "log\\.\\w+\\("
            ],
            "libraries": ["logging", "structlog", "loguru"],
            "minimum_levels": ["error", "warning"]
          },
          "java": {
            "patterns": [
              "log\\.\\w+\\(",
              "logger\\.\\w+\\(",
              "@Log",
              "LOGGER\\.\\w+\\("
            ],
            "libraries": ["slf4j", "logback", "log4j"],
            "minimum_levels": ["error", "warn"]
          },
          "go": {
            "patterns": [
              "log\\.\\w+\\(",
              "logger\\.\\w+\\(",
              "zap\\.\\w+\\("
            ],
            "libraries": ["log", "logrus", "zap", "slog"],
            "minimum_levels": ["error", "warn"]
          },
          "rust": {
            "patterns": [
              "log::\\w+!\\(",
              "tracing::\\w+!\\(",
              "info!\\(",
              "error!\\("
            ],
            "libraries": ["log", "tracing", "slog"],
            "minimum_levels": ["error", "warn"]
          },
          "csharp": {
            "patterns": [
              "_logger\\.\\w+\\(",
              "logger\\.\\w+\\(",
              "Log\\.\\w+\\("
            ],
            "libraries": ["Serilog", "NLog", "log4net", "Microsoft.Extensions.Logging"],
            "minimum_levels": ["Error", "Warning"]
          }
        }
      },
      "tracing": {
        "description": "Distributed tracing and span tracking",
        "language_specific": {
          "typescript": {
            "patterns": [
              "tracer\\.startSpan\\(",
              "@Tracing\\(",
              "span\\.setTag\\(",
              "trace\\.getActiveSpan\\(",
              "context\\.with\\("
            ],
            "libraries": ["opentelemetry-api", "opentelemetry-auto-instrumentations-node", "jaeger-client", "dd-trace"],
            "required": false
          },
          "python": {
            "patterns": [
              "tracer\\.start_span\\(",
              "@trace\\(",
              "trace\\.get_current_span\\(",
              "span\\.set_attribute\\("
            ],
            "libraries": ["opentelemetry-api", "opentelemetry-instrumentation", "jaeger-client", "ddtrace"],
            "required": false
          },
          "java": {
            "patterns": [
              "tracer\\.buildSpan\\(",
              "@Traced",
              "SpanBuilder\\.startSpan\\(",
              "GlobalTracer\\.get\\(\\)\\.buildSpan\\("
            ],
            "libraries": ["opentelemetry-api", "jaeger-client", "brave"],
            "required": false
          },
          "go": {
            "patterns": [
              "span := trace\\.StartSpan\\(",
              "tracer\\.Start\\(",
              "@trace\\.WithSpan\\("
            ],
            "libraries": ["go.opentelemetry.io/trace", "go.opentelemetry.io/otel"],
            "required": false
          },
          "rust": {
            "patterns": [
              "tracing::span\\(",
              "span = tracing::info_span!\\(",
              "tracing::trace_span!\\("
            ],
            "libraries": ["tracing", "tracing-subscriber", "opentelemetry"],
            "required": false
          },
          "csharp": {
            "patterns": [
              "Activity.*Start\\(",
              "using.*ActivitySource\\.StartActivity\\(",
              "TelemetryClient\\.TrackTrace\\("
            ],
            "libraries": ["System.Diagnostics.DiagnosticSource", "OpenTelemetry"],
            "required": false
          }
        }
      },
      "error_handling": {
        "description": "Error catching and logging with context",
        "language_specific": {
          "typescript": {
            "patterns": [
              "try\\s*\\{[^}]*catch",
              "catch\\s*\\([^)]*\\)\\s*\\{",
              "\\.catch\\(",
              "throw new Error\\("
            ],
            "must_include": ["message", "context"],
            "required": true
          },
          "python": {
            "patterns": [
              "try:\\s*[^e]*except",
              "except\\s+\\w+",
              "except Exception as"
            ],
            "must_include": ["message", "context"],
            "required": true
          },
          "java": {
            "patterns": [
              "try\\s*\\{[^}]*catch",
              "catch\\s*\\([^)]*\\)\\s*\\{",
              "throw new.*Exception\\("
            ],
            "must_include": ["message", "context"],
            "required": true
          },
          "go": {
            "patterns": [
              "if err != nil",
              "error\\{[^}]*\\}",
              "panic\\("
            ],
            "must_include": ["message", "context"],
            "required": true
          },
          "rust": {
            "patterns": [
              "match.*Err\\(",
              "Result::\\w+\\(",
              "?\\s*;\\s*$"
            ],
            "must_include": ["message", "context"],
            "required": true
          },
          "csharp": {
            "patterns": [
              "try\\s*\\{[^}]*catch",
              "catch\\s*\\([^)]*\\)\\s*\\{",
              "throw new.*Exception\\("
            ],
            "must_include": ["message", "context"],
            "required": true
          }
        }
      },
      "metrics": {
        "description": "Performance and business metrics collection",
        "language_specific": {
          "typescript": {
            "patterns": [
              "metrics\\.\\w+\\(",
              "histogram\\.observe\\(",
              "counter\\.\\w+\\(",
              "gauge\\.set\\(",
              "prometheus\\.",
              "statsd\\."
            ],
            "libraries": ["prom-client", "prometheus-client", "node-statsd", "opentelemetry-api-metrics"],
            "required": false
          },
          "python": {
            "patterns": [
              "metrics\\.\\w+\\(",
              "histogram\\(",
              "counter\\.\\w+\\(",
              "gauge\\.set\\(",
              "statsd\\."
            ],
            "libraries": ["prometheus-client", "statsd", "opentelemetry-api"],
            "required": false
          },
          "java": {
            "patterns": [
              "MeterRegistry\\.\\w+\\(",
              "Timer\\.record\\(",
              "Counter\\.increment\\(",
              "Gauge\\.gauge\\("
            ],
            "libraries": ["micrometer-core", "prometheus-client", "opentelemetry-api"],
            "required": false
          },
          "go": {
            "patterns": [
              "metric\\.\\w+\\(",
              "prometheus\\.\\w+\\(",
              "counter\\.Add\\(",
              "histogram\\.Record\\("
            ],
            "libraries": ["prometheus/client_golang", "go.opentelemetry.io/otel/metric"],
            "required": false
          },
          "rust": {
            "patterns": [
              "metrics::\\w+\\(",
              "counter!\\(",
              "histogram!\\(",
              "gauge!\\("
            ],
            "libraries": ["metrics", "prometheus", "opentelemetry"],
            "required": false
          },
          "csharp": {
            "patterns": [
              "Meter\\.CreateCounter\\(",
              "Meter\\.CreateHistogram\\(",
              "Meter\\.CreateGauge\\("
            ],
            "libraries": ["System.Diagnostics.Metrics", "OpenTelemetry.Exporter.Prometheus"],
            "required": false
          }
        }
      }
    },
    "contracts": [
      {
        "id": "example_payment",
        "name": "EXAMPLE: Payment Processing Flow",
        "enabled": false,
        "description": "Example contract. Disable this and create your own.",
        "entry_points": {
          "routes": [
            "POST /api/payments/charge",
            "POST /api/payments/refund"
          ],
          "search_patterns": [
            "PaymentController",
            "processPayment",
            "chargePayment"
          ]
        },
        "critical_path": [
          {
            "step": 1,
            "component": "PaymentController",
            "method_pattern": "charge|process",
            "description": "API entry point",
            "must_observe": [
              "logging",
              "error_handling"
            ],
            "metrics_required": [
              "request_latency",
              "request_status"
            ]
          },
          {
            "step": 2,
            "component": "PaymentService",
            "method_pattern": "charge|processCharge",
            "description": "Business logic layer",
            "must_observe": [
              "logging",
              "tracing",
              "error_handling"
            ],
            "metrics_required": [
              "operation_duration"
            ]
          },
          {
            "step": 3,
            "component": "Database|PaymentRepository",
            "method_pattern": "insert|save|execute",
            "description": "Data persistence layer",
            "must_observe": [
              "logging",
              "error_handling"
            ],
            "metrics_required": [
              "query_duration"
            ]
          }
        ],
        "response_tracking": {
          "track_success_failure": true,
          "track_latency": true,
          "track_error_messages": true,
          "expected_fields": [
            "statusCode",
            "duration",
            "errorMessage"
          ]
        }
      },
      {
        "id": "example_user_retrieval",
        "name": "EXAMPLE: User Data Retrieval",
        "enabled": false,
        "description": "Example contract. Disable this and create your own.",
        "entry_points": {
          "routes": [
            "GET /api/users/:id",
            "GET /api/users"
          ],
          "search_patterns": [
            "UserController",
            "getUser",
            "fetchUser"
          ]
        },
        "critical_path": [
          {
            "step": 1,
            "component": "UserController",
            "method_pattern": "get|retrieve|list",
            "description": "API entry point",
            "must_observe": [
              "logging",
              "error_handling"
            ],
            "metrics_required": [
              "request_latency"
            ]
          },
          {
            "step": 2,
            "component": "UserService",
            "method_pattern": "getById|findUser|list",
            "description": "Business logic layer",
            "must_observe": [
              "logging"
            ],
            "metrics_required": []
          },
          {
            "step": 3,
            "component": "Database|UserRepository",
            "method_pattern": "query|find|select",
            "description": "Data persistence layer",
            "must_observe": [
              "logging"
            ],
            "metrics_required": [
              "query_duration"
            ]
          }
        ],
        "response_tracking": {
          "track_success_failure": true,
          "track_latency": true,
          "track_error_messages": false
        }
      }
    ]
  }